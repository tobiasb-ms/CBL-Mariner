From ff6c016a20f95580e7d1f06e3787c0675675807f Mon Sep 17 00:00:00 2001
From: Manuel Huber <mahuber@microsoft.com>
Date: Wed, 22 Mar 2023 17:12:09 +0000
Subject: [PATCH] Merged PR 12983: Commit d5ed88f3: Fix 43668151: Resolve high
 UVM memory footprint

Bug: https://microsoft.visualstudio.com/OS/_workitems/edit/43668151

Rationale: This is a temporary solution for optimizing memory usage for the
current mechanism of requesting resources through pod Limit annotations:
- if no Limits are specified and hence WorkloadMemMB is 0, set
  a default value 'StaticWorkloadDefaultMem' to allocate a default amount
  of memory for use for containers in the sandbox in addition to the base memory
- if Limits are specified, the base memory and the sum of Limits are
  allocated. The end user needs to be aware of the minimum memory
  requirements for their pods, otherwise the pod will be stuck in the
  ContainerCreating state

Testing: Manual testing, creating pods with Limits and without limits, and with two containers where each container has a limit, tested with integration in a SPEC file where the config variables were set via environment variables via the make command
---
 src/runtime/Makefile                          |  8 ++++-
 src/runtime/config/configuration-clh.toml.in  | 17 +++++----
 src/runtime/config/configuration-fc.toml.in   |  5 +++
 src/runtime/config/configuration-qemu.toml.in |  7 +++-
 src/runtime/pkg/katautils/config.go           | 36 ++++++++++---------
 src/runtime/pkg/oci/utils.go                  | 11 ++++++
 src/runtime/virtcontainers/hypervisor.go      |  2 +-
 src/runtime/virtcontainers/sandbox.go         |  3 ++
 8 files changed, 63 insertions(+), 26 deletions(-)

diff --git a/src/runtime/Makefile b/src/runtime/Makefile
index 99dde7e..1fbac61 100644
--- a/src/runtime/Makefile
+++ b/src/runtime/Makefile
@@ -158,7 +158,7 @@ DEFVCPUS := 1
 # Default maximum number of vCPUs
 DEFMAXVCPUS := 0
 # Default memory size in MiB
-DEFMEMSZ := 2048
+DEFMEMSZ ?= 2048
 # Default memory slots
 # Cases to consider :
 # - nvdimm rootfs image
@@ -225,6 +225,9 @@ DEFSANDBOXCGROUPONLY ?= false
 
 DEFSTATICRESOURCEMGMT ?= false
 
+# Default memory for use for workloads within the sandbox if no specific workload memory value is requested
+DEFSTATICSANDBOXWORKLOADMEM ?= 2048
+
 DEFBINDMOUNTS := []
 
 SED = sed
@@ -292,6 +295,7 @@ ifneq (,$(CLHCMD))
     # CLH-specific options (all should be suffixed by "_CLH")
     # currently, huge pages are required for virtiofsd support
     DEFNETWORKMODEL_CLH := tcfilter
+    DEFSTATICRESOURCEMGMT_CLH = true
     KERNELTYPE_CLH = uncompressed
     KERNEL_NAME_CLH = $(call MAKE_KERNEL_NAME,$(KERNELTYPE_CLH))
     KERNELPATH_CLH = $(KERNELDIR)/$(KERNEL_NAME_CLH)
@@ -501,7 +505,9 @@ USER_VARS += DEFENTROPYSOURCE
 USER_VARS += DEFVALIDENTROPYSOURCES
 USER_VARS += DEFSANDBOXCGROUPONLY
 USER_VARS += DEFSTATICRESOURCEMGMT
+USER_VARS += DEFSTATICRESOURCEMGMT_CLH
 USER_VARS += DEFSTATICRESOURCEMGMT_FC
+USER_VARS += DEFSTATICSANDBOXWORKLOADMEM
 USER_VARS += DEFBINDMOUNTS
 USER_VARS += DEFVFIOMODE
 USER_VARS += BUILDFLAGS
diff --git a/src/runtime/config/configuration-clh.toml.in b/src/runtime/config/configuration-clh.toml.in
index df7cc7a..d9e4864 100644
--- a/src/runtime/config/configuration-clh.toml.in
+++ b/src/runtime/config/configuration-clh.toml.in
@@ -31,7 +31,7 @@ rootfs_type=@DEFROOTFSTYPE@
 #
 # Known limitations:
 # * Does not work by design:
-#   - CPU Hotplug 
+#   - CPU Hotplug
 #   - Memory Hotplug
 #   - NVDIMM devices
 #
@@ -206,9 +206,9 @@ block_device_driver = "virtio-blk"
 # and we strongly advise users to refer the Cloud Hypervisor official
 # documentation for a better understanding of its internals:
 # https://github.com/cloud-hypervisor/cloud-hypervisor/blob/main/docs/io_throttling.md
-# 
+#
 # Bandwidth rate limiter options
-# 
+#
 # net_rate_limiter_bw_max_rate controls network I/O bandwidth (size in bits/sec
 # for SB/VM).
 # The same value is used for inbound and outbound bandwidth.
@@ -242,9 +242,9 @@ block_device_driver = "virtio-blk"
 # and we strongly advise users to refer the Cloud Hypervisor official
 # documentation for a better understanding of its internals:
 # https://github.com/cloud-hypervisor/cloud-hypervisor/blob/main/docs/io_throttling.md
-# 
+#
 # Bandwidth rate limiter options
-# 
+#
 # disk_rate_limiter_bw_max_rate controls disk I/O bandwidth (size in bits/sec
 # for SB/VM).
 # The same value is used for inbound and outbound bandwidth.
@@ -380,7 +380,12 @@ sandbox_cgroup_only=@DEFSANDBOXCGROUPONLY@
 # - When running with pods, sandbox sizing information will only be available if using Kubernetes >= 1.23 and containerd >= 1.6. CRI-O
 #   does not yet support sandbox sizing annotations.
 # - When running single containers using a tool like ctr, container sizing information will be available.
-static_sandbox_resource_mgmt=@DEFSTATICRESOURCEMGMT@
+static_sandbox_resource_mgmt=@DEFSTATICRESOURCEMGMT_CLH@
+
+# If set, the runtime will use the value as the default workload memory in MB for the sandbox when no workload memory request is passed
+# down to the shim via the OCI when static sandbox resource management is enabled. With this, we ensure that workloads have a proper
+# default amount of memory available within the sandbox.
+static_sandbox_default_workload_mem=@DEFSTATICSANDBOXWORKLOADMEM@
 
 # If specified, sandbox_bind_mounts identifieds host paths to be mounted (ro) into the sandboxes shared path.
 # This is only valid if filesystem sharing is utilized. The provided path(s) will be bindmounted into the shared fs directory.
diff --git a/src/runtime/config/configuration-fc.toml.in b/src/runtime/config/configuration-fc.toml.in
index 10dc177..6dfe5ce 100644
--- a/src/runtime/config/configuration-fc.toml.in
+++ b/src/runtime/config/configuration-fc.toml.in
@@ -358,6 +358,11 @@ sandbox_cgroup_only=@DEFSANDBOXCGROUPONLY@
 # - When running single containers using a tool like ctr, container sizing information will be available.
 static_sandbox_resource_mgmt=@DEFSTATICRESOURCEMGMT_FC@
 
+# If set, the runtime will use the value as the default workload memory in MB for the sandbox when no workload memory request is passed
+# down to the shim via the OCI when static sandbox resource management is enabled. With this, we ensure that workloads have a proper
+# default amount of memory available within the sandbox.
+static_sandbox_default_workload_mem=@DEFSTATICSANDBOXWORKLOADMEM@
+
 # If enabled, the runtime will not create Kubernetes emptyDir mounts on the guest filesystem. Instead, emptyDir mounts will
 # be created on the host and shared via virtio-fs. This is potentially slower, but allows sharing of files from host to guest.
 disable_guest_empty_dir=@DEFDISABLEGUESTEMPTYDIR@
diff --git a/src/runtime/config/configuration-qemu.toml.in b/src/runtime/config/configuration-qemu.toml.in
index 4fb5a8b..cb29ca5 100644
--- a/src/runtime/config/configuration-qemu.toml.in
+++ b/src/runtime/config/configuration-qemu.toml.in
@@ -33,7 +33,7 @@ rootfs_type=@DEFROOTFSTYPE@
 #
 # Known limitations:
 # * Does not work by design:
-#   - CPU Hotplug 
+#   - CPU Hotplug
 #   - Memory Hotplug
 #   - NVDIMM devices
 #
@@ -622,6 +622,11 @@ sandbox_cgroup_only=@DEFSANDBOXCGROUPONLY@
 # - When running single containers using a tool like ctr, container sizing information will be available.
 static_sandbox_resource_mgmt=@DEFSTATICRESOURCEMGMT@
 
+# If set, the runtime will use the value as the default workload memory in MB for the sandbox when no workload memory request is passed
+# down to the shim via the OCI when static sandbox resource management is enabled. With this, we ensure that workloads have a proper
+# default amount of memory available within the sandbox.
+static_sandbox_default_workload_mem=@DEFSTATICSANDBOXWORKLOADMEM@
+
 # If specified, sandbox_bind_mounts identifieds host paths to be mounted (ro) into the sandboxes shared path.
 # This is only valid if filesystem sharing is utilized. The provided path(s) will be bindmounted into the shared fs directory.
 # If defaults are utilized, these mounts should be available in the guest at `/run/kata-containers/shared/containers/sandbox-mounts`
diff --git a/src/runtime/pkg/katautils/config.go b/src/runtime/pkg/katautils/config.go
index 997d073..866db0b 100644
--- a/src/runtime/pkg/katautils/config.go
+++ b/src/runtime/pkg/katautils/config.go
@@ -161,23 +161,24 @@ type hypervisor struct {
 }
 
 type runtime struct {
-	InterNetworkModel         string   `toml:"internetworking_model"`
-	JaegerEndpoint            string   `toml:"jaeger_endpoint"`
-	JaegerUser                string   `toml:"jaeger_user"`
-	JaegerPassword            string   `toml:"jaeger_password"`
-	VfioMode                  string   `toml:"vfio_mode"`
-	GuestSeLinuxLabel         string   `toml:"guest_selinux_label"`
-	SandboxBindMounts         []string `toml:"sandbox_bind_mounts"`
-	Experimental              []string `toml:"experimental"`
-	Tracing                   bool     `toml:"enable_tracing"`
-	DisableNewNetNs           bool     `toml:"disable_new_netns"`
-	DisableGuestSeccomp       bool     `toml:"disable_guest_seccomp"`
-	EnableVCPUsPinning        bool     `toml:"enable_vcpus_pinning"`
-	Debug                     bool     `toml:"enable_debug"`
-	SandboxCgroupOnly         bool     `toml:"sandbox_cgroup_only"`
-	StaticSandboxResourceMgmt bool     `toml:"static_sandbox_resource_mgmt"`
-	EnablePprof               bool     `toml:"enable_pprof"`
-	DisableGuestEmptyDir      bool     `toml:"disable_guest_empty_dir"`
+	InterNetworkModel               string   `toml:"internetworking_model"`
+	JaegerEndpoint                  string   `toml:"jaeger_endpoint"`
+	JaegerUser                      string   `toml:"jaeger_user"`
+	JaegerPassword                  string   `toml:"jaeger_password"`
+	VfioMode                        string   `toml:"vfio_mode"`
+	GuestSeLinuxLabel               string   `toml:"guest_selinux_label"`
+	SandboxBindMounts               []string `toml:"sandbox_bind_mounts"`
+	Experimental                    []string `toml:"experimental"`
+	Tracing                         bool     `toml:"enable_tracing"`
+	DisableNewNetNs                 bool     `toml:"disable_new_netns"`
+	DisableGuestSeccomp             bool     `toml:"disable_guest_seccomp"`
+	EnableVCPUsPinning              bool     `toml:"enable_vcpus_pinning"`
+	Debug                           bool     `toml:"enable_debug"`
+	SandboxCgroupOnly               bool     `toml:"sandbox_cgroup_only"`
+	StaticSandboxResourceMgmt       bool     `toml:"static_sandbox_resource_mgmt"`
+	EnablePprof                     bool     `toml:"enable_pprof"`
+	DisableGuestEmptyDir            bool     `toml:"disable_guest_empty_dir"`
+	StaticSandboxWorkloadDefaultMem uint32   `toml:"static_sandbox_default_workload_mem"`
 }
 
 type agent struct {
@@ -1372,6 +1373,7 @@ func LoadConfiguration(configPath string, ignoreLogging bool) (resolvedConfigPat
 	config.EnableVCPUsPinning = tomlConf.Runtime.EnableVCPUsPinning
 	config.GuestSeLinuxLabel = tomlConf.Runtime.GuestSeLinuxLabel
 	config.StaticSandboxResourceMgmt = tomlConf.Runtime.StaticSandboxResourceMgmt
+	config.StaticSandboxWorkloadDefaultMem = tomlConf.Runtime.StaticSandboxWorkloadDefaultMem
 	config.SandboxCgroupOnly = tomlConf.Runtime.SandboxCgroupOnly
 	config.DisableNewNetNs = tomlConf.Runtime.DisableNewNetNs
 	config.EnablePprof = tomlConf.Runtime.EnablePprof
diff --git a/src/runtime/pkg/oci/utils.go b/src/runtime/pkg/oci/utils.go
index d2d713f..436a0d2 100644
--- a/src/runtime/pkg/oci/utils.go
+++ b/src/runtime/pkg/oci/utils.go
@@ -143,6 +143,9 @@ type RuntimeConfig struct {
 	// any later resource updates.
 	StaticSandboxResourceMgmt bool
 
+	// Memory to allocate for workloads within the sandbox when workload memory is unspecified
+	StaticSandboxWorkloadDefaultMem uint32
+
 	// Determines if create a netns for hypervisor process
 	DisableNewNetNs bool
 
@@ -952,6 +955,8 @@ func SandboxConfig(ocispec specs.Spec, runtime RuntimeConfig, bundlePath, cid st
 
 		StaticResourceMgmt: runtime.StaticSandboxResourceMgmt,
 
+		StaticWorkloadDefaultMem: runtime.StaticSandboxWorkloadDefaultMem,
+
 		ShmSize: shmSize,
 
 		VfioMode: runtime.VfioMode,
@@ -976,6 +981,12 @@ func SandboxConfig(ocispec specs.Spec, runtime RuntimeConfig, bundlePath, cid st
 	// with the base number of CPU/memory (which is equal to the default CPU/memory specified for the runtime
 	// configuration or annotations) as well as any specified workload resources.
 	if sandboxConfig.StaticResourceMgmt {
+		// If no Limits are set in pod config, use StaticWorkloadDefaultMem to ensure the containers generally
+		// have a reasonable amount of memory available
+		if sandboxConfig.SandboxResources.WorkloadMemMB == 0 {
+			sandboxConfig.SandboxResources.WorkloadMemMB = sandboxConfig.StaticWorkloadDefaultMem
+		}
+
 		sandboxConfig.SandboxResources.BaseCPUs = sandboxConfig.HypervisorConfig.NumVCPUs
 		sandboxConfig.SandboxResources.BaseMemMB = sandboxConfig.HypervisorConfig.MemorySize
 
diff --git a/src/runtime/virtcontainers/hypervisor.go b/src/runtime/virtcontainers/hypervisor.go
index dee5fec..0d86807 100644
--- a/src/runtime/virtcontainers/hypervisor.go
+++ b/src/runtime/virtcontainers/hypervisor.go
@@ -74,7 +74,7 @@ const (
 	vSockLogsPort = 1025
 
 	// MinHypervisorMemory is the minimum memory required for a VM.
-	MinHypervisorMemory = 256
+	MinHypervisorMemory = 64
 
 	defaultMsize9p = 8192
 
diff --git a/src/runtime/virtcontainers/sandbox.go b/src/runtime/virtcontainers/sandbox.go
index 523c072..bb36af0 100644
--- a/src/runtime/virtcontainers/sandbox.go
+++ b/src/runtime/virtcontainers/sandbox.go
@@ -160,6 +160,9 @@ type SandboxConfig struct {
 
 	HypervisorConfig HypervisorConfig
 
+	StaticWorkloadDefaultMem uint32
+
+	// Memory to allocate for workloads within the sandbox when workload memory is unspecified
 	ShmSize uint64
 
 	SandboxResources SandboxResourceSizing
-- 
2.25.1

